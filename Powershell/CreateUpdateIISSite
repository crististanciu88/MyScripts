function CreateOrUpdateIISSite {
    param (
        [string]$RootName,
        [string]$NestedSiteName,
        [string]$NestedPhysicalPath,
        [string]$NestedBindingInformation,
        [string]$NestedCertificateThumbprint
    )

    # Check if the root site exists
    $rootSiteExists = & appcmd list site $RootName 2>&1 | Select-String "SITE NAME" -Quiet

    # Create or update the root site
    if (-not $rootSiteExists) {
        & appcmd add site /name:$RootName /bindings:http/*:80:
        & appcmd set app $RootName /enabledProtocols:http
    }

    # Check if the nested site exists
    $nestedSiteExists = Get-WebApplication -Site $RootName | Where-Object { $_.Path -eq "/$NestedSiteName" }

    # Create or update the nested site
    if (-not $nestedSiteExists) {
        New-WebApplication -Name $NestedSiteName -Site $RootName -PhysicalPath $NestedPhysicalPath
    }

    # Use appcmd to update the nested site
    & appcmd set app "$RootName/$NestedSiteName" /enabledProtocols:http

    # Check if a certificate thumbprint is provided and bind it
    if ($NestedCertificateThumbprint) {
        & appcmd set site "$RootName" /bindings:https/*:443:$NestedBindingInformation /cert:$NestedCertificateThumbprint
    }
}

# Example usage:
# CreateOrUpdateIISSite -RootName "RootSite" -NestedSiteName "NestedSite" -NestedPhysicalPath "C:\NestedSite" -NestedBindingInformation "*:80:" -NestedCertificateThumbprint "yourThumbprint"


function CreateOrUpdateIISSite {
    param (
        [string]$RootName,
        [string]$RootAppPoolName,
        [string]$RootPhysicalPath,
        [string]$RootLoggingDirectory,
        [string]$Name,
        [string]$AppPoolName,
        [string]$PhysicalPath,
        [string[]]$BindingInfo,
        [string]$LoggingDirectory
    )

    # Function to create or update an IIS site using appcmd
    function CreateOrUpdateSite {
        param (
            [string]$SiteName,
            [string]$AppPoolName,
            [string]$PhysicalPath,
            [string[]]$BindingInfo,
            [string]$LoggingDirectory
        )

        # Check if the site exists using appcmd
        $siteExists = & appcmd list site $SiteName 2>&1 | Select-String "SITE NAME" -Quiet

        if ($siteExists) {
            # Update the existing site using appcmd
            & appcmd set site /site.name:$SiteName /[path='/'].[path='/'].physicalPath:$PhysicalPath
            & appcmd set apppool /apppool.name:$AppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion
            & appcmd set config /section:system.applicationHost/sites /[path='/$SiteName'].logfile.directory:$LoggingDirectory

            Write-Host "Site '$SiteName' updated."
        } else {
            # Create a new site using appcmd
            & appcmd add site /name:$SiteName /physicalPath:$PhysicalPath /bindings:$BindingInfo /logfile.directory:$LoggingDirectory
            & appcmd set apppool /apppool.name:$AppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion

            Write-Host "Site '$SiteName' created."
        }
    }

    # Check if RootName parameter is provided
    if ($RootName) {
        # Check if the root site exists using appcmd
        $rootSiteExists = & appcmd list site $RootName 2>&1 | Select-String "SITE NAME" -Quiet

        if ($rootSiteExists) {
            # Update the existing root site using appcmd
            & appcmd set site /site.name:$RootName /[path='/'].[path='/'].physicalPath:$RootPhysicalPath
            & appcmd set apppool /apppool.name:$RootAppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion
            & appcmd set config /section:system.applicationHost/sites /[path='/$RootName'].logfile.directory:$RootLoggingDirectory

            Write-Host "Root site '$RootName' updated."
        } else {
            # Create a new root site using appcmd
            & appcmd add site /name:$RootName /physicalPath:$RootPhysicalPath /bindings:$BindingInfo /logfile.directory:$RootLoggingDirectory
            & appcmd set apppool /apppool.name:$RootAppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion

            Write-Host "Root site '$RootName' created."
        }
    }

    # Check if the standard site exists using appcmd
    $siteExists = & appcmd list site $Name 2>&1 | Select-String "SITE NAME" -Quiet

    if ($siteExists) {
        # Update the existing standard site using appcmd
        & appcmd set site /site.name:$Name /[path='/'].[path='/'].physicalPath:$PhysicalPath
        & appcmd set apppool /apppool.name:$AppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion
        & appcmd set config /section:system.applicationHost/sites /[path='/$Name'].logfile.directory:$LoggingDirectory

        Write-Host "Site '$Name' updated."
    } else {
        # Create a new standard site using appcmd
        if ($RootName) {
            & appcmd add app /site.name:$RootName /path:/$Name /physicalPath:$PhysicalPath /bindings:$BindingInfo /logfile.directory:$LoggingDirectory
        } else {
            & appcmd add site /name:$Name /physicalPath:$PhysicalPath /bindings:$BindingInfo /logfile.directory:$LoggingDirectory
        }

        & appcmd set apppool /apppool.name:$AppPoolName /managedRuntimeVersion:$AppPoolRuntimeVersion

        Write-Host "Site '$Name' created."
    }
}

# Example usage:
CreateOrUpdateIISSite -RootName "RootSite" -RootAppPoolName "RootAppPool" -RootPhysicalPath "C:\RootSite" -RootLoggingDirectory "C:\Logs\RootSite" -Name "MySite" -AppPoolName "MyAppPool" -PhysicalPath "C:\MySite" -BindingInfo @("*:8080:", "*:8443:") -LoggingDirectory "C:\Logs\MySite"

function SiteExistsUnderRootSite($siteName, $rootSiteName) {
    $site = Get-IISSite -Name $siteName -ErrorAction SilentlyContinue

    if ($site) {
        $appPath = (Get-WebConfigurationProperty -Filter "system.applicationHost/sites/site[@name='$siteName']/application" -Name "path" -PSPath "IIS:\").Value

        if ($appPath.StartsWith("/$rootSiteName")) {
            return $true
        }
    }

    return $false
}

appcmd set app "YourSite/YourApp" /path:/YourVirtualPath /physicalPath:"C:\Your\Physical\Path" /applicationPool:YourAppPoolName /enabledProtocols:http,https

package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/base64"
	"encoding/json"
	"errors"
	"math/big"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"time"
)

// Mock response struct for testing
type MockAuthResponse struct {
	Auth Auth `json:"auth"`
}

// Test for CertLogin function with a successful response
func TestCertLogin_Success(t *testing.T) {
	// Create a test HTTP server that simulates the actual login endpoint.
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		response := MockAuthResponse{
			Auth: Auth{
				ClientToken: "test-token",
			},
		}
		json.NewEncoder(w).Encode(response)
	}))
	defer ts.Close()

	// Generate a temporary self-signed certificate and private key for testing
	certFile, keyFile := generateSelfSignedCertificate(t)
	defer os.Remove(certFile.Name())
	defer os.Remove(keyFile.Name())

	// Test CertLogin function
	token, err := CertLogin(certFile.Name(), keyFile.Name(), "test-namespace", ts.URL)
	if err != nil {
		t.Fatalf("expected no error, got %v", err)
	}

	// Validate the token returned
	if token != "test-token" {
		t.Fatalf("expected token to be 'test-token', got %s", token)
	}
}

// Test for CertLogin function with an error response
func TestCertLogin_Error(t *testing.T) {
	// Create a test HTTP server that simulates an error response.
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusBadRequest)
	}))
	defer ts.Close()

	// Generate a temporary self-signed certificate and private key for testing
	certFile, keyFile := generateSelfSignedCertificate(t)
	defer os.Remove(certFile.Name())
	defer os.Remove(keyFile.Name())

	// Test CertLogin function
	_, err := CertLogin(certFile.Name(), keyFile.Name(), "test-namespace", ts.URL)
	if err == nil {
		t.Fatalf("expected an error, got none")
	}
}

// Test for createTLSClient function with valid input
func TestCreateTLSClient_Success(t *testing.T) {
	// Generate a temporary self-signed certificate and private key for testing
	certFile, keyFile := generateSelfSignedCertificate(t)
	defer os.Remove(certFile.Name())
	defer os.Remove(keyFile.Name())

	// Test create TLS client function
	client, err := createTLSClient(certFile.Name(), keyFile.Name())
	if err != nil {
		t.Fatalf("expected no error, got %v", err)
	}
	if client == nil {
		t.Fatalf("expected non-nil client, got nil")
	}
}

// Test for createTLSClient function with invalid paths
func TestCreateTLSClient_Error(t *testing.T) {
	// Test with invalid paths
	_, err := createTLSClient("invalid-cert.pem", "invalid-key.pem")
	if err == nil {
		t.Fatalf("expected an error for invalid TLS files, got none")
	}
}

// Helper function to generate a self-signed certificate and private key
func generateSelfSignedCertificate(t *testing.T) (*os.File, *os.File) {
	// Create a self-signed certificate
	priv, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		t.Fatalf("failed to generate private key: %v", err)
	}

	// Prepare the certificate
	notBefore := time.Now()
	notAfter := notBefore.Add(365 * 24 * time.Hour)

	serialNumber, err := rand.Int(rand.Reader, big.NewInt(1<<62))
	if err != nil {
		t.Fatalf("failed to generate serial number: %v", err)
	}

	derBytes, err := x509.CreateCertificate(rand.Reader, &x509.Certificate{
		SerialNumber: serialNumber,
		Subject: pkix.Name{
			Organization: []string{"Test Organization"},
		},
		NotBefore:             notBefore,
		NotAfter:              notAfter,
		KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
		ExtKeyUsage:          []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},
	}, &x509.Certificate{
		SerialNumber: serialNumber,
		Subject: pkix.Name{
			Organization: []string{"Test Organization"},
		},
		NotBefore: notBefore,
		NotAfter:  notAfter,
	}, &priv.PublicKey, priv)
	if err != nil {
		t.Fatalf("failed to create certificate: %v", err)
	}

	// Create temporary files for the certificate and the key
	certFile, err := os.CreateTemp("", "test-cert.pem")
	if err != nil {
		t.Fatalf("failed to create temp cert file: %v", err)
	}
	defer certFile.Close()

	keyFile, err := os.CreateTemp("", "test-key.pem")
	if err != nil {
		t.Fatalf("failed to create temp key file: %v", err)
	}
	defer keyFile.Close()

	// Write the certificate and private key to the files
	if err := pemEncode(certFile, derBytes, "CERTIFICATE"); err != nil {
		t.Fatalf("failed to write cert file: %v", err)
	}
	if err := pemEncode(keyFile, x509.MarshalPKCS1PrivateKey(priv), "PRIVATE KEY"); err != nil {
		t.Fatalf("failed to write key file: %v", err)
	}

	// Return the created files
	return certFile, keyFile
}

// Helper function to encode PEM formatted data to a file
func pemEncode(file *os.File, data []byte, blockType string) error {
	encoded := base64.StdEncoding.EncodeToString(data)
	if _, err := file.WriteString("-----BEGIN " + blockType + "-----\n" + encoded + "\n-----END " + blockType + "-----\n"); err != nil {
		return err
	}
	return nil
}

func main() {
	// This main function is not necessary but is included to satisfy the Go package requirement.
}
